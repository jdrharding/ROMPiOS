// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.17020
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace ROMPiOS.cms.romponline.com {
    
    
    /// <remarks/>
    [System.Web.Services.WebServiceBinding(Name="ROMPLocationSoap", Namespace="http://tempuri.org/")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ROMPLocation : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback LearnerLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckSessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLocationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckInWithLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckInOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckOutOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckOutWithoutLocationOperationCompleted;
        
        public ROMPLocation() {
            this.Url = "http://54.83.199.58/romplocservice/ROMPLocation.asmx";
        }
        
        public ROMPLocation(string url) {
            this.Url = url;
        }
        
        public event LearnerLoginCompletedEventHandler LearnerLoginCompleted;
        
        public event CheckSessionCompletedEventHandler CheckSessionCompleted;
        
        public event GetLocationsCompletedEventHandler GetLocationsCompleted;
        
        public event CheckInWithLocationCompletedEventHandler CheckInWithLocationCompleted;
        
        public event CheckInCompletedEventHandler CheckInCompleted;
        
        public event CheckOutCompletedEventHandler CheckOutCompleted;
        
        public event CheckOutWithoutLocationCompletedEventHandler CheckOutWithoutLocationCompleted;
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LearnerLogin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public LoginResponse LearnerLogin(string user, string pass) {
            object[] results = this.Invoke("LearnerLogin", new object[] {
                        user,
                        pass});
            return ((LoginResponse)(results[0]));
        }
        
        public System.IAsyncResult BeginLearnerLogin(string user, string pass, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("LearnerLogin", new object[] {
                        user,
                        pass}, callback, asyncState);
        }
        
        public LoginResponse EndLearnerLogin(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((LoginResponse)(results[0]));
        }
        
        public void LearnerLoginAsync(string user, string pass) {
            this.LearnerLoginAsync(user, pass, null);
        }
        
        public void LearnerLoginAsync(string user, string pass, object userState) {
            if ((this.LearnerLoginOperationCompleted == null)) {
                this.LearnerLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLearnerLoginCompleted);
            }
            this.InvokeAsync("LearnerLogin", new object[] {
                        user,
                        pass}, this.LearnerLoginOperationCompleted, userState);
        }
        
        private void OnLearnerLoginCompleted(object arg) {
            if ((this.LearnerLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LearnerLoginCompleted(this, new LearnerLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckSession", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public bool CheckSession(string sessionKey) {
            object[] results = this.Invoke("CheckSession", new object[] {
                        sessionKey});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BeginCheckSession(string sessionKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckSession", new object[] {
                        sessionKey}, callback, asyncState);
        }
        
        public bool EndCheckSession(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void CheckSessionAsync(string sessionKey) {
            this.CheckSessionAsync(sessionKey, null);
        }
        
        public void CheckSessionAsync(string sessionKey, object userState) {
            if ((this.CheckSessionOperationCompleted == null)) {
                this.CheckSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckSessionCompleted);
            }
            this.InvokeAsync("CheckSession", new object[] {
                        sessionKey}, this.CheckSessionOperationCompleted, userState);
        }
        
        private void OnCheckSessionCompleted(object arg) {
            if ((this.CheckSessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckSessionCompleted(this, new CheckSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLocations", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public FacilityCoordinates[] GetLocations(string sessionKey, int grpID) {
            object[] results = this.Invoke("GetLocations", new object[] {
                        sessionKey,
                        grpID});
            return ((FacilityCoordinates[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetLocations(string sessionKey, int grpID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLocations", new object[] {
                        sessionKey,
                        grpID}, callback, asyncState);
        }
        
        public FacilityCoordinates[] EndGetLocations(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((FacilityCoordinates[])(results[0]));
        }
        
        public void GetLocationsAsync(string sessionKey, int grpID) {
            this.GetLocationsAsync(sessionKey, grpID, null);
        }
        
        public void GetLocationsAsync(string sessionKey, int grpID, object userState) {
            if ((this.GetLocationsOperationCompleted == null)) {
                this.GetLocationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLocationsCompleted);
            }
            this.InvokeAsync("GetLocations", new object[] {
                        sessionKey,
                        grpID}, this.GetLocationsOperationCompleted, userState);
        }
        
        private void OnGetLocationsCompleted(object arg) {
            if ((this.GetLocationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLocationsCompleted(this, new GetLocationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckInWithLocation", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string CheckInWithLocation(string sessionKey, int locID, double locLat, double locLong) {
            object[] results = this.Invoke("CheckInWithLocation", new object[] {
                        sessionKey,
                        locID,
                        locLat,
                        locLong});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginCheckInWithLocation(string sessionKey, int locID, double locLat, double locLong, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckInWithLocation", new object[] {
                        sessionKey,
                        locID,
                        locLat,
                        locLong}, callback, asyncState);
        }
        
        public string EndCheckInWithLocation(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void CheckInWithLocationAsync(string sessionKey, int locID, double locLat, double locLong) {
            this.CheckInWithLocationAsync(sessionKey, locID, locLat, locLong, null);
        }
        
        public void CheckInWithLocationAsync(string sessionKey, int locID, double locLat, double locLong, object userState) {
            if ((this.CheckInWithLocationOperationCompleted == null)) {
                this.CheckInWithLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckInWithLocationCompleted);
            }
            this.InvokeAsync("CheckInWithLocation", new object[] {
                        sessionKey,
                        locID,
                        locLat,
                        locLong}, this.CheckInWithLocationOperationCompleted, userState);
        }
        
        private void OnCheckInWithLocationCompleted(object arg) {
            if ((this.CheckInWithLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckInWithLocationCompleted(this, new CheckInWithLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckIn", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string CheckIn(string sessionKey, int locID) {
            object[] results = this.Invoke("CheckIn", new object[] {
                        sessionKey,
                        locID});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginCheckIn(string sessionKey, int locID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckIn", new object[] {
                        sessionKey,
                        locID}, callback, asyncState);
        }
        
        public string EndCheckIn(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void CheckInAsync(string sessionKey, int locID) {
            this.CheckInAsync(sessionKey, locID, null);
        }
        
        public void CheckInAsync(string sessionKey, int locID, object userState) {
            if ((this.CheckInOperationCompleted == null)) {
                this.CheckInOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckInCompleted);
            }
            this.InvokeAsync("CheckIn", new object[] {
                        sessionKey,
                        locID}, this.CheckInOperationCompleted, userState);
        }
        
        private void OnCheckInCompleted(object arg) {
            if ((this.CheckInCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckInCompleted(this, new CheckInCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckOut", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string CheckOut(string sessionKey, int locID) {
            object[] results = this.Invoke("CheckOut", new object[] {
                        sessionKey,
                        locID});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginCheckOut(string sessionKey, int locID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckOut", new object[] {
                        sessionKey,
                        locID}, callback, asyncState);
        }
        
        public string EndCheckOut(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void CheckOutAsync(string sessionKey, int locID) {
            this.CheckOutAsync(sessionKey, locID, null);
        }
        
        public void CheckOutAsync(string sessionKey, int locID, object userState) {
            if ((this.CheckOutOperationCompleted == null)) {
                this.CheckOutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckOutCompleted);
            }
            this.InvokeAsync("CheckOut", new object[] {
                        sessionKey,
                        locID}, this.CheckOutOperationCompleted, userState);
        }
        
        private void OnCheckOutCompleted(object arg) {
            if ((this.CheckOutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckOutCompleted(this, new CheckOutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckOutWithoutLocation", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string CheckOutWithoutLocation(string sessionKey) {
            object[] results = this.Invoke("CheckOutWithoutLocation", new object[] {
                        sessionKey});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginCheckOutWithoutLocation(string sessionKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckOutWithoutLocation", new object[] {
                        sessionKey}, callback, asyncState);
        }
        
        public string EndCheckOutWithoutLocation(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void CheckOutWithoutLocationAsync(string sessionKey) {
            this.CheckOutWithoutLocationAsync(sessionKey, null);
        }
        
        public void CheckOutWithoutLocationAsync(string sessionKey, object userState) {
            if ((this.CheckOutWithoutLocationOperationCompleted == null)) {
                this.CheckOutWithoutLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckOutWithoutLocationCompleted);
            }
            this.InvokeAsync("CheckOutWithoutLocation", new object[] {
                        sessionKey}, this.CheckOutWithoutLocationOperationCompleted, userState);
        }
        
        private void OnCheckOutWithoutLocationCompleted(object arg) {
            if ((this.CheckOutWithoutLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckOutWithoutLocationCompleted(this, new CheckOutWithoutLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class LoginResponse {
        
        /// <remarks/>
        public bool Success;
        
        /// <remarks/>
        public string SessionKey;
        
        /// <remarks/>
        public int GroupID;
        
        /// <remarks/>
        public int UserID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class FacilityCoordinates {
        
        /// <remarks/>
        public double Latitude;
        
        /// <remarks/>
        public double Longitude;
        
        /// <remarks/>
        public string LocationName;
        
        /// <remarks/>
        public int LocationID;
    }
    
    public partial class LearnerLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LearnerLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public LoginResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LoginResponse)(this.results[0]));
            }
        }
    }
    
    public delegate void LearnerLoginCompletedEventHandler(object sender, LearnerLoginCompletedEventArgs args);
    
    public partial class CheckSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void CheckSessionCompletedEventHandler(object sender, CheckSessionCompletedEventArgs args);
    
    public partial class GetLocationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLocationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public FacilityCoordinates[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FacilityCoordinates[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetLocationsCompletedEventHandler(object sender, GetLocationsCompletedEventArgs args);
    
    public partial class CheckInWithLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckInWithLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void CheckInWithLocationCompletedEventHandler(object sender, CheckInWithLocationCompletedEventArgs args);
    
    public partial class CheckInCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckInCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void CheckInCompletedEventHandler(object sender, CheckInCompletedEventArgs args);
    
    public partial class CheckOutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckOutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void CheckOutCompletedEventHandler(object sender, CheckOutCompletedEventArgs args);
    
    public partial class CheckOutWithoutLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckOutWithoutLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void CheckOutWithoutLocationCompletedEventHandler(object sender, CheckOutWithoutLocationCompletedEventArgs args);
}
